// Generated by https://quicktype.io
// https://api.mercadolibre.com/sites/MLA/search?q=query

export interface ISearchResponse {
  site_id: SiteID;
  query: string;
  paging: Paging;
  results: Result[];
  secondary_results: any[];
  related_results: any[];
  sort: Sort;
  available_sorts: Sort[];
  filters: any[];
  available_filters: AvailableFilter[];
}

export interface AvailableFilter {
  id: string;
  name: string;
  type: string;
  values: AvailableFilterValue[];
}

export interface AvailableFilterValue {
  id: string;
  name: string;
  results: number;
}

export interface Sort {
  id: null | string;
  name: string;
}

export interface Paging {
  total: number;
  primary_results: number;
  offset: number;
  limit: number;
}

export interface Result {
  id: string;
  site_id: SiteID;
  title: string;
  seller: Seller;
  price: number;
  prices: Prices;
  sale_price: null;
  currency_id: CurrencyID;
  available_quantity: number;
  sold_quantity: number;
  buying_mode: BuyingMode;
  listing_type_id: ListingTypeID;
  stop_time: string;
  condition: Condition;
  permalink: string;
  thumbnail: string;
  thumbnail_id: string;
  accepts_mercadopago: boolean;
  installments: Installments;
  address: Address;
  shipping: Shipping;
  seller_address: SellerAddress;
  attributes: Attribute[];
  original_price: number | null;
  category_id: string;
  official_store_id: number | null;
  domain_id: string;
  catalog_product_id: null | string;
  tags: ResultTag[];
  catalog_listing?: boolean;
  use_thumbnail_id: boolean;
  order_backend: number;
  differential_pricing?: DifferentialPricing;
}

export interface Address {
  state_id: StateID;
  state_name: StateName;
  city_id: null | string;
  city_name: string;
}

export enum StateID {
  ArB = 'AR-B',
  ArC = 'AR-C',
  ArX = 'AR-X',
}

export enum StateName {
  BuenosAires = 'Buenos Aires',
  CapitalFederal = 'Capital Federal',
  Córdoba = 'Córdoba',
}

export interface Attribute {
  id: ID;
  name: Name;
  value_name: null | string;
  attribute_group_name: AttributeGroupName;
  source: number;
  value_id: null | string;
  value_struct: Struct | null;
  values: AttributeValue[];
  attribute_group_id: AttributeGroupID;
}

export enum AttributeGroupID {
  Empty = '',
  Main = 'MAIN',
  Others = 'OTHERS',
}

export enum AttributeGroupName {
  Empty = '',
  Otros = 'Otros',
  Principales = 'Principales',
}

export enum ID {
  Brand = 'BRAND',
  IsOnline = 'IS_ONLINE',
  ItemCondition = 'ITEM_CONDITION',
  Length = 'LENGTH',
  Line = 'LINE',
  Model = 'MODEL',
  NetWeight = 'NET_WEIGHT',
  PackageLength = 'PACKAGE_LENGTH',
  PackageWeight = 'PACKAGE_WEIGHT',
  PacksNumber = 'PACKS_NUMBER',
  UnitsPerPack = 'UNITS_PER_PACK',
  UnitsPerPackage = 'UNITS_PER_PACKAGE',
}

export enum Name {
  CantidadDePacks = 'Cantidad de packs',
  CondiciónDelÍtem = 'Condición del ítem',
  EsEnLínea = 'Es en línea',
  Largo = 'Largo',
  LargoDelPaquete = 'Largo del paquete',
  Línea = 'Línea',
  Marca = 'Marca',
  Modelo = 'Modelo',
  PesoDelPaquete = 'Peso del paquete',
  PesoNeto = 'Peso neto',
  UnidadesPorEnvase = 'Unidades por envase',
  UnidadesPorPack = 'Unidades por pack',
}

export interface Struct {
  number: number;
  unit: Unit;
}

export enum Unit {
  CM = 'cm',
  G = 'g',
  Kg = 'kg',
}

export interface AttributeValue {
  source: number;
  id: null | string;
  name: null | string;
  struct: Struct | null;
}

export enum BuyingMode {
  BuyItNow = 'buy_it_now',
}

export enum Condition {
  New = 'new',
}

export enum CurrencyID {
  Ars = 'ARS',
}

export interface DifferentialPricing {
  id: number;
}

export interface Installments {
  quantity: number;
  amount: number;
  rate: number;
  currency_id: CurrencyID;
}

export enum ListingTypeID {
  GoldPro = 'gold_pro',
  GoldSpecial = 'gold_special',
}

export interface Prices {
  id: string;
  prices: Price[];
  presentation: Presentation;
  payment_method_prices: any[];
  reference_prices?: ReferencePrice[];
  purchase_discounts?: any[];
}

export interface Presentation {
  display_currency: CurrencyID;
}

export interface Price {
  id: string;
  type: PriceType;
  conditions: Conditions;
  amount: number;
  regular_amount: number | null;
  currency_id: CurrencyID;
  exchange_rate_context: ExchangeRateContext;
  metadata: Metadata;
  last_updated: string;
}

export interface Conditions {
  context_restrictions: string[];
  start_time: null | string;
  end_time: null | string;
  eligible: boolean;
}

export enum ExchangeRateContext {
  Default = 'DEFAULT',
}

export interface Metadata {
  campaign_id?: string;
  promotion_id?: string;
  promotion_type?: PromotionType;
  discount_meli_amount?: number;
  campaign_discount_percentage?: number;
  campaign_end_date?: string;
  order_item_price?: number;
}

export enum PromotionType {
  Campaign = 'campaign',
  Custom = 'custom',
  MarketplaceCampaign = 'marketplace_campaign',
}

export enum PriceType {
  Promotion = 'promotion',
  Standard = 'standard',
}

export interface ReferencePrice {
  id: string;
  type: ReferencePriceType;
  conditions: Conditions;
  amount: number;
  currency_id: CurrencyID;
  exchange_rate_context: ExchangeRateContext;
  tags: any[];
  last_updated: string;
}

export enum ReferencePriceType {
  Was = 'was',
}

export interface Seller {
  id: number;
  permalink: string;
  registration_date: string;
  car_dealer: boolean;
  real_estate_agency: boolean;
  tags: SellerTag[];
  seller_reputation: SellerReputation;
  eshop?: Eshop;
}

export interface Eshop {
  nick_name: string;
  eshop_rubro: null;
  eshop_id: number;
  eshop_locations: any[];
  site_id: SiteID;
  eshop_logo_url: string;
  eshop_status_id: number;
  seller: number;
  eshop_experience: number;
}

export enum SiteID {
  Mla = 'MLA',
}

export interface SellerReputation {
  transactions: Transactions;
  power_seller_status: PowerSellerStatus | null;
  metrics: Metrics;
  level_id: LevelID;
}

export enum LevelID {
  The5_Green = '5_green',
}

export interface Metrics {
  claims: Cancellations;
  delayed_handling_time: Cancellations;
  sales: Sales;
  cancellations: Cancellations;
}

export interface Cancellations {
  rate: number;
  value: number;
  period: CancellationsPeriod;
}

export enum CancellationsPeriod {
  The365Days = '365 days',
  The60Days = '60 days',
}

export interface Sales {
  period: CancellationsPeriod;
  completed: number;
}

export enum PowerSellerStatus {
  Gold = 'gold',
  Platinum = 'platinum',
  Silver = 'silver',
}

export interface Transactions {
  total: number;
  canceled: number;
  period: TransactionsPeriod;
  ratings: Ratings;
  completed: number;
}

export enum TransactionsPeriod {
  Historic = 'historic',
}

export interface Ratings {
  negative: number;
  positive: number;
  neutral: number;
}

export enum SellerTag {
  Brand = 'brand',
  CreditsActiveBorrower = 'credits_active_borrower',
  CreditsPriority4 = 'credits_priority_4',
  CreditsProfile = 'credits_profile',
  Eshop = 'eshop',
  LargeSeller = 'large_seller',
  MediumSellerAdvanced = 'medium_seller_advanced',
  MessagesAsBuyer = 'messages_as_buyer',
  MessagesAsSeller = 'messages_as_seller',
  Mshops = 'mshops',
  Normal = 'normal',
  UserInfoVerified = 'user_info_verified',
}

export interface SellerAddress {
  id: string;
  comment: string;
  address_line: string;
  zip_code: string;
  country: Sort;
  state: Sort;
  city: Sort;
  latitude: string;
  longitude: string;
}

export interface Shipping {
  free_shipping: boolean;
  mode: Mode;
  tags: ShippingTag[];
  logistic_type: LogisticType;
  store_pick_up: boolean;
}

export enum LogisticType {
  CrossDocking = 'cross_docking',
  Fulfillment = 'fulfillment',
  NotSpecified = 'not_specified',
  XdDropOff = 'xd_drop_off',
}

export enum Mode {
  Me2 = 'me2',
  NotSpecified = 'not_specified',
}

export enum ShippingTag {
  FSThresholdMlaChangeFeb2021 = 'fs_threshold_mla_change_feb2021',
  Fulfillment = 'fulfillment',
  MandatoryFreeShipping = 'mandatory_free_shipping',
  SelfServiceIn = 'self_service_in',
  SelfServiceOut = 'self_service_out',
}

export enum ResultTag {
  BestSellerCandidate = 'best_seller_candidate',
  BrandVerified = 'brand_verified',
  CartEligible = 'cart_eligible',
  CatalogListingEligible = 'catalog_listing_eligible',
  DraggedBidsAndVisits = 'dragged_bids_and_visits',
  GoodQualityPicture = 'good_quality_picture',
  GoodQualityThumbnail = 'good_quality_thumbnail',
  ImmediatePayment = 'immediate_payment',
  IncompleteTechnicalSpecs = 'incomplete_technical_specs',
  LoyaltyDiscountEligible = 'loyalty_discount_eligible',
  PoorQualityPicture = 'poor_quality_picture',
  ShippingGuaranteed = 'shipping_guaranteed',
}
